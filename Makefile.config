ifndef HOSTCC
  HOSTCC = gcc
endif

ifndef HOSTCXX
  HOSTCXX = g++
endif

ifndef CC
  CC = $(CROSS_COMPILE)gcc
endif

ifndef CXX
  CXX = $(CROSS_COMPILE)g++
endif

ifndef AS
  AS = $(CROSS_COMPILE)as
endif

ifndef LD
  LD = $(CROSS_COMPILE)ld
endif

ifndef CPP
  CPP = $(CC) -E
endif

ifndef AR
  AR = $(CROSS_COMPILE)ar
endif

ifndef NM
  NM = $(CROSS_COMPILE)nm
endif

ifndef STRIP
  STRIP = $(CROSS_COMPILE)strip
endif

ifndef OBJCOPY
  OBJCOPY = $(CROSS_COMPILE)objcopy
endif

ifndef OBJDUMP
  OBJDUMP = $(CROSS_COMPILE)objdump
endif

# compile in gnu89 
HOSTCFLAGS := $(call cc-option, -std=gnu89)

# enable all warnings
HOSTCFLAGS += $(call cc-option, -Wall)

# optimize
HOSTCFLAGS += $(call cc-option, -O2)

# suppress unused warnings
HOSTCFLAGS += $(call cc-option, -Wno-unused)            \
              $(call cc-option, -Wno-unused-value)      \
              $(call cc-option, -Wno-unused-parameter)  \
              $(call cc-option, -Wno-unused-variable)

# don't warn about about missing field initializers
HOSTCFLAGS += $(call cc-option, -Wno-missing-field-initializers)

# warn when a global function is defined without a prototype declaration
HOSTCFLAGS += $(call cc-option, -Wmissing-prototypes)

# warn if a function declaration lacks argument types
HOSTCFLAGS += $(call cc-option, -Wstrict-prototypes)

# do not emit frame pointers
HOSTCFLAGS += $(call cc-option, -fomit-frame-pointer)

# pass all flags for the host C compiler to the host C++ compiler
HOSTCXXFLAGS := $(HOSTCFLAGS)

# script interpreters 
AWK  := awk
PERL := perl

# utilities 
GENKSYMS       := ./scripts/genksyms/genksyms
INSTALLKERNEL  := installkernel
DEPMOD         := /sbin/depmod
KALLSYMS       := ./scripts/kallsyms
CHECK          := sparse

###############################################################################
# global flags for C sources

# enable standard compiler warnings
KBUILD_CFLAGS := $(call cc-option, -Wall)

# warn about undefined identifiers in the preprocessor
KBUILD_CFLAGS += $(call cc-option, -Wundef)

# warn if a function declaration lacks argument types
KBUILD_CFLAGS += $(call cc-option, -Wstrict-prototypes)

# make Clang produce errors when it encounters an option it doesn't support 
KBUILD_CFLAGS += $(call cc-option, -Werror-unused-arguments)

# don't warn about about missing field initializers
KBUILD_CFLAGS += $(call cc-option, -Wno-missing-field-initializers)

# suppress unused warnings
KBUILD_CFLAGS += $(call cc-option, -Wno-unused)           \
                 $(call cc-option, -Wno-unused-value)     \
                 $(call cc-option, -Wno-unused-parameter) \
                 $(call cc-option, -Wno-unused-variable)

# suppress uninitialized warnings
KBUILD_CFLAGS += $(call cc-option, -Wno-uninitialized)

# don't warn about printf() format stuff
KBUILD_CFLAGS += $(call cc-option, -Wno-format)           \
                 $(call cc-option, -Wno-format-security)

# ignore unknown warning options silently
KBUILD_CFLAGS += $(call cc-option, -Wno-unknown-warning-option)

# don't do strict aliasing
KBUILD_CFLAGS += $(call cc-option, -fno-strict-aliasing)

# don't use common variable storage
KBUILD_CFLAGS += $(call cc-option, -fno-common)

# don't use sse instruction
KBUILD_CFLAGS += $(call cc-option, -mno-sse)

# do not allow implicit function definitions
KBUILD_CFLAGS += $(call cc-option, -Werror-implicit-function-declaration)

# warn about C99 declaration after statement
KBUILD_CFLAGS += $(call cc-option, -Wdeclaration-after-statement)

# disable pointer signed / unsigned warnings in gcc 4.0
KBUILD_CFLAGS += $(call cc-option, -Wno-pointer-sign)

# disable invalid "can't wrap" optimizations for signed / pointers
KBUILD_CFLAGS	+= $(call cc-option, -fno-strict-overflow) \
                 $(call cc-option, -Wno-strict-overflow)

# conserve stack if available
KBUILD_CFLAGS += $(call cc-option, -fconserve-stack)

###############################################################################
# global flags for the C preprocessor sources

# macros
KBUILD_CPPFLAGS := -D__KERNEL__

###############################################################################
# global flags for assembly sources

# macros
KBUILD_AFLAGS := -D__ASSEMBLY__

# don't use Clang's integrated assembler
KBUILD_AFLAGS += $(call cc-option, -no-integrated-as)

# kernel-specific flags
KBUILD_CFLAGS_KERNEL :=
KBUILD_AFLAGS_KERNEL :=

# module specific flags
KBUILD_AFLAGS_MODULE  := -DMODULE
KBUILD_CFLAGS_MODULE  := -DMODULE
KBUILD_LDFLAGS_MODULE := -T $(srctree)/scripts/module-common.lds

# optimization flags
KBUILD_OPTIMIZE_SIZE_FLAGS	+= $(call cc-option, -Os)
KBUILD_OPTIMIZE_SPEED_FLAGS	+= $(call cc-option, -O2)

# flags to control standard includes
KBUILD_NOSTDINC_FLAGS := -nostdinc -isystem \
                         $(shell $(CC) -print-file-name=include)

# debug flags
KBUILD_DEBUG_FLAGS := $(call cc-option, -g)

# runtime profiling flags
KBUILD_PROFILING_FLAGS := $(call cc-option, -pg)

# gcov profiling flags
KBUILD_GCOV_FLAGS := $(call cc-option, -fprofile-arcs) \
                     $(call cc-option, -ftest-coverage)

